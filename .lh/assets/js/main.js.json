{
    "sourceFile": "assets/js/main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1751410852102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751413522571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,297 @@\n+// SocialCloud Management - Main JavaScript\n+\n+// State variable for talents\n+let talents = [];\n+\n+// Load talents data\n+function loadTalentsData(callback) {\n+    // Create script element to load talents data\n+    const script = document.createElement('script');\n+    script.src = '/assets/js/talents-data.js';\n+    document.head.appendChild(script);\n+\n+    script.onload = function() {\n+        // Use official talents\n+        talents = window.officialTalents || [];\n+        if (callback) callback();\n+    };\n+}\n+\n+// Performance monitoring\n+function trackPerformance() {\n+    if ('performance' in window) {\n+        window.addEventListener('load', () => {\n+            const perfData = performance.getEntriesByType('navigation')[0];\n+            const loadTime = perfData.loadEventEnd - perfData.loadEventStart;\n+            const domContentLoaded = perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart;\n+\n+            // Performance metrics tracked for optimization\n+\n+            // Track largest contentful paint\n+            if ('PerformanceObserver' in window) {\n+                const observer = new PerformanceObserver((list) => {\n+                    const entries = list.getEntries();\n+                    const lastEntry = entries[entries.length - 1];\n+                    // LCP tracking for performance optimization\n+                });\n+                observer.observe({ entryTypes: ['largest-contentful-paint'] });\n+            }\n+        });\n+    }\n+}\n+\n+// Initialize on page load\n+document.addEventListener('DOMContentLoaded', function() {\n+    trackPerformance();\n+    loadTalentsData(function() {\n+        // Initialize all components after talents data is loaded\n+        initializeHero();\n+        renderFeaturedTalents();\n+        renderStatistics();\n+        initAnimations();\n+        initHeaderScroll();\n+        initSmoothScroll();\n+    });\n+});\n+\n+// Initialize hero section - removed particles for professional clean look\n+function initializeHero() {\n+    // Clean, professional hero without distracting animations\n+    // Hero section initialized with professional clean design\n+}\n+\n+// Render featured talents on homepage\n+function renderFeaturedTalents() {\n+    const talentGrid = document.getElementById('talent-grid');\n+    if (!talentGrid) return;\n+\n+    // Show only 6 talents using the featured flag\n+    const featuredTalents = talents\n+        .filter(talent => talent.featured === true)\n+        .slice(0, 6);\n+\n+    talentGrid.innerHTML = '';\n+\n+    featuredTalents.forEach(talent => {\n+        const card = createTalentCard(talent);\n+        talentGrid.appendChild(card);\n+    });\n+}\n+\n+// Create talent card\n+function createTalentCard(talent) {\n+    const card = document.createElement('div');\n+    card.className = 'card card-glow';\n+\n+    const formatFollowers = (num) => {\n+        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';\n+        if (num >= 1000) return (num / 1000).toFixed(0) + 'K';\n+        return num.toString();\n+    };\n+\n+    // Create optimized image without WebP conversion\n+    const createOptimizedImage = (imageSrc, altText) => {\n+        return `\n+      <img src=\"${imageSrc}\" alt=\"${altText}\" loading=\"lazy\"\n+           style=\"width: 100%; height: 280px; object-fit: cover; object-position: center; border-radius: var(--radius-lg);\"\n+           onerror=\"this.src='/assets/images/talents/placeholder-default.svg'; this.onerror=null;\">\n+    `;\n+    };\n+\n+    // Get primary platform for metrics\n+    const primaryPlatform = talent.platforms.reduce((prev, current) =>\n+        (prev.followers > current.followers) ? prev : current\n+    );\n+\n+    // Truncate bio for card display\n+    const truncatedBio = talent.bio.length > 120 ?\n+        talent.bio.substring(0, 120) + '...' :\n+        talent.bio;\n+\n+    card.innerHTML = `\n+    <div class=\"talent-card-wrapper\">\n+      <div class=\"talent-card-image\">\n+        ${createOptimizedImage(talent.image, `${talent.name} - ${talent.categories.join(', ')} creator`)}\n+        <div style=\"position: absolute; bottom: 0; left: 0; right: 0; background: linear-gradient(transparent, rgba(0,0,0,0.9)); padding: var(--spacing-5); color: white; min-height: 80px; display: flex; flex-direction: column; justify-content: flex-end;\">\n+          <h3 style=\"margin: 0 0 var(--spacing-2) 0; font-size: var(--text-xl); font-weight: 700; text-transform: uppercase; letter-spacing: 0.05em; line-height: 1.2;\">${talent.name}</h3>\n+          <p style=\"margin: 0; font-size: var(--text-sm); opacity: 0.9; line-height: 1.3; height: 20px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\">${talent.categories.join(' â€¢ ')}</p>\n+        </div>\n+      </div>\n+      <div class=\"talent-card-overlay\">\n+        <div class=\"talent-overlay-content\">\n+          <h3>${talent.name}</h3>\n+          <p class=\"bio\">${truncatedBio}</p>\n+          <div class=\"talent-metrics\">\n+            <div class=\"metric-item\">\n+              <span class=\"metric-value\">${formatFollowers(talent.totalFollowers)}</span>\n+              <span class=\"metric-label\">Total Reach</span>\n+            </div>\n+            <div class=\"metric-item\">\n+              <span class=\"metric-value\">${talent.avgEngagement}%</span>\n+              <span class=\"metric-label\">Avg Engagement</span>\n+            </div>\n+            <div class=\"metric-item\">\n+              <span class=\"metric-value\">${talent.platforms.length}</span>\n+              <span class=\"metric-label\">Platforms</span>\n+            </div>\n+            <div class=\"metric-item\">\n+              <span class=\"metric-value\">${primaryPlatform.platform}</span>\n+              <span class=\"metric-label\">Primary Channel</span>\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+      <a href=\"talent-profile.html?id=${talent.slug}\" class=\"talent-view-profile\">View Profile</a>\n+    </div>\n+  `;\n+\n+  return card;\n+}\n+\n+// Render platform statistics\n+function renderStatistics() {\n+  const statsGrid = document.getElementById('stats-grid');\n+  if (!statsGrid) return;\n+\n+  // Calculate total stats from official talents\n+  const totalFollowers = talents.reduce((sum, talent) => sum + talent.totalFollowers, 0);\n+  const avgEngagement = (talents.reduce((sum, talent) => sum + talent.avgEngagement, 0) / talents.length).toFixed(1);\n+\n+  const stats = [\n+    { value: `${(totalFollowers / 1000000).toFixed(1)}M+`, label: 'Total Reach' },\n+    { value: talents.length, label: 'Managed Talents' },\n+    { value: `${avgEngagement}%`, label: 'Avg. Engagement' },\n+    { value: '95%', label: 'Client Satisfaction' }\n+  ];\n+\n+  statsGrid.innerHTML = '';\n+\n+  stats.forEach(stat => {\n+    const statCard = document.createElement('div');\n+    statCard.className = 'text-center';\n+    statCard.innerHTML = `\n+      <h3 class=\"gradient-text mb-2\" style=\"font-size: var(--text-4xl);\">${stat.value}</h3>\n+      <p style=\"color: var(--color-text-secondary);\">${stat.label}</p>\n+    `;\n+    statsGrid.appendChild(statCard);\n+  });\n+}\n+\n+// Smooth scroll for navigation links\n+function initSmoothScroll() {\n+  document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n+    anchor.addEventListener('click', function (e) {\n+      e.preventDefault();\n+      const target = document.querySelector(this.getAttribute('href'));\n+      if (target) {\n+        target.scrollIntoView({\n+          behavior: 'smooth',\n+          block: 'start'\n+        });\n+      }\n+    });\n+  });\n+}\n+\n+// Header scroll effect and active section highlighting\n+function initHeaderScroll() {\n+  const header = document.querySelector('header');\n+  const navLinks = document.querySelectorAll('.nav-link');\n+  const sections = document.querySelectorAll('section[id]');\n+  let lastScroll = 0;\n+\n+  window.addEventListener('scroll', () => {\n+    const currentScroll = window.pageYOffset;\n+\n+    // Header background effect\n+    if (currentScroll > 50) {\n+      header.style.background = 'rgba(10, 10, 10, 0.95)';\n+      header.style.backdropFilter = 'blur(20px)';\n+      header.style.boxShadow = 'var(--shadow-lg)';\n+    } else {\n+      header.style.background = 'rgba(26, 26, 26, 0.8)';\n+      header.style.backdropFilter = 'blur(10px)';\n+      header.style.boxShadow = 'none';\n+    }\n+\n+    // Active section highlighting\n+    sections.forEach(section => {\n+      const sectionTop = section.offsetTop - 100;\n+      const sectionHeight = section.offsetHeight;\n+      const sectionId = section.getAttribute('id');\n+\n+      if (currentScroll >= sectionTop && currentScroll < sectionTop + sectionHeight) {\n+        navLinks.forEach(link => {\n+          link.classList.remove('active');\n+          if (link.getAttribute('href') === `#${sectionId}`) {\n+            link.classList.add('active');\n+          }\n+        });\n+      }\n+    });\n+\n+    lastScroll = currentScroll;\n+  });\n+}\n+\n+// Initialize animations on scroll\n+function initAnimations() {\n+  const observerOptions = {\n+    threshold: 0.1,\n+    rootMargin: '0px 0px -100px 0px'\n+  };\n+\n+  const observer = new IntersectionObserver((entries) => {\n+    entries.forEach(entry => {\n+      if (entry.isIntersecting) {\n+        entry.target.classList.add('animate-fadeIn');\n+        observer.unobserve(entry.target);\n+      }\n+    });\n+  }, observerOptions);\n+\n+  // Observe all cards and sections\n+  document.querySelectorAll('.card, .section > .container > *').forEach(el => {\n+    el.style.opacity = '0';\n+    observer.observe(el);\n+  });\n+}\n+\n+// Utility function for number formatting\n+function formatNumber(num) {\n+  return new Intl.NumberFormat().format(num);\n+}\n+\n+// Mobile menu toggle\n+function toggleMobileMenu() {\n+  const mobileMenu = document.getElementById('mobile-menu');\n+  const menuBtn = document.querySelector('.mobile-menu-btn');\n+\n+  if (mobileMenu) {\n+    if (mobileMenu.style.display === 'none' || mobileMenu.style.display === '') {\n+      mobileMenu.style.display = 'block';\n+      menuBtn.innerHTML = '<span style=\"display: inline-block; width: 20px; height: 2px; background: currentColor; position: relative; transform: rotate(45deg);\"></span>';\n+    } else {\n+      mobileMenu.style.display = 'none';\n+      menuBtn.innerHTML = '<span style=\"display: inline-block; width: 20px; height: 2px; background: currentColor; position: relative;\"></span>';\n+    }\n+  }\n+}\n+\n+// Close mobile menu when clicking nav links\n+document.addEventListener('DOMContentLoaded', function() {\n+  const mobileNavLinks = document.querySelectorAll('.mobile-menu .nav-link');\n+  mobileNavLinks.forEach(link => {\n+    link.addEventListener('click', () => {\n+      const mobileMenu = document.getElementById('mobile-menu');\n+      const menuBtn = document.querySelector('.mobile-menu-btn');\n+      if (mobileMenu) {\n+        mobileMenu.style.display = 'none';\n+        menuBtn.innerHTML = '<span style=\"display: inline-block; width: 20px; height: 2px; background: currentColor; position: relative;\"></span>';\n+      }\n+    });\n+  });\n+});\n+\n+// Make toggleMobileMenu globally available\n+window.toggleMobileMenu = toggleMobileMenu;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1751410852102,
            "name": "Commit-0",
            "content": "// SocialCloud Management - Main JavaScript\n\n// State variable for talents\nlet talents = [];\n\n// Load talents data\nfunction loadTalentsData(callback) {\n    // Create script element to load talents data\n    const script = document.createElement('script');\n    script.src = '/assets/js/talents-data.js';\n    document.head.appendChild(script);\n\n    script.onload = function() {\n        // Use official talents\n        talents = window.officialTalents || [];\n        if (callback) callback();\n    };\n}\n\n// Performance monitoring\nfunction trackPerformance() {\n    if ('performance' in window) {\n        window.addEventListener('load', () => {\n            const perfData = performance.getEntriesByType('navigation')[0];\n            const loadTime = perfData.loadEventEnd - perfData.loadEventStart;\n            const domContentLoaded = perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart;\n\n            // Performance metrics tracked for optimization\n\n            // Track largest contentful paint\n            if ('PerformanceObserver' in window) {\n                const observer = new PerformanceObserver((list) => {\n                    const entries = list.getEntries();\n                    const lastEntry = entries[entries.length - 1];\n                    // LCP tracking for performance optimization\n                });\n                observer.observe({ entryTypes: ['largest-contentful-paint'] });\n            }\n        });\n    }\n}\n\n// Initialize on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n    trackPerformance();\n    loadTalentsData(function() {\n        // Initialize all components after talents data is loaded\n        initializeHero();\n        renderFeaturedTalents();\n        renderStatistics();\n        initAnimations();\n        initHeaderScroll();\n        initSmoothScroll();\n    });\n});\n\n// Initialize hero section - removed particles for professional clean look\nfunction initializeHero() {\n    // Clean, professional hero without distracting animations\n    // Hero section initialized with professional clean design\n}\n\n// Render featured talents on homepage\nfunction renderFeaturedTalents() {\n    const talentGrid = document.getElementById('talent-grid');\n    if (!talentGrid) return;\n\n    // Show only 7 talents, excluding Omma, Packgod, and Dankcube\n    const excludedNames = ['Omma', 'Packgod', 'Dankcube'];\n    const featuredTalents = talents\n        .filter(talent => !excludedNames.includes(talent.name))\n        .slice(0, 7);\n\n    talentGrid.innerHTML = '';\n\n    featuredTalents.forEach(talent => {\n        const card = createTalentCard(talent);\n        talentGrid.appendChild(card);\n    });\n}\n\n// Create talent card\nfunction createTalentCard(talent) {\n    const card = document.createElement('div');\n    card.className = 'card card-glow';\n\n    const formatFollowers = (num) => {\n        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';\n        if (num >= 1000) return (num / 1000).toFixed(0) + 'K';\n        return num.toString();\n    };\n\n    // Create optimized image without WebP conversion\n    const createOptimizedImage = (imageSrc, altText) => {\n        return `\n      <img src=\"${imageSrc}\" alt=\"${altText}\" loading=\"lazy\"\n           style=\"width: 100%; height: 280px; object-fit: cover; object-position: center; border-radius: var(--radius-lg);\"\n           onerror=\"this.src='/assets/images/talents/placeholder-default.svg'; this.onerror=null;\">\n    `;\n    };\n\n    // Get primary platform for metrics\n    const primaryPlatform = talent.platforms.reduce((prev, current) =>\n        (prev.followers > current.followers) ? prev : current\n    );\n\n    // Truncate bio for card display\n    const truncatedBio = talent.bio.length > 120 ?\n        talent.bio.substring(0, 120) + '...' :\n        talent.bio;\n\n    card.innerHTML = `\n    <div class=\"talent-card-wrapper\">\n      <div class=\"talent-card-image\">\n        ${createOptimizedImage(talent.image, `${talent.name} - ${talent.categories.join(', ')} creator`)}\n        <div style=\"position: absolute; bottom: 0; left: 0; right: 0; background: linear-gradient(transparent, rgba(0,0,0,0.9)); padding: var(--spacing-5); color: white; min-height: 80px; display: flex; flex-direction: column; justify-content: flex-end;\">\n          <h3 style=\"margin: 0 0 var(--spacing-2) 0; font-size: var(--text-xl); font-weight: 700; text-transform: uppercase; letter-spacing: 0.05em; line-height: 1.2;\">${talent.name}</h3>\n          <p style=\"margin: 0; font-size: var(--text-sm); opacity: 0.9; line-height: 1.3; height: 20px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\">${talent.categories.join(' â€¢ ')}</p>\n        </div>\n      </div>\n      <div class=\"talent-card-overlay\">\n        <div class=\"talent-overlay-content\">\n          <h3>${talent.name}</h3>\n          <p class=\"bio\">${truncatedBio}</p>\n          <div class=\"talent-metrics\">\n            <div class=\"metric-item\">\n              <span class=\"metric-value\">${formatFollowers(talent.totalFollowers)}</span>\n              <span class=\"metric-label\">Total Reach</span>\n            </div>\n            <div class=\"metric-item\">\n              <span class=\"metric-value\">${talent.avgEngagement}%</span>\n              <span class=\"metric-label\">Avg Engagement</span>\n            </div>\n            <div class=\"metric-item\">\n              <span class=\"metric-value\">${talent.platforms.length}</span>\n              <span class=\"metric-label\">Platforms</span>\n            </div>\n            <div class=\"metric-item\">\n              <span class=\"metric-value\">${primaryPlatform.platform}</span>\n              <span class=\"metric-label\">Primary Channel</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <a href=\"talent-profile.html?id=${talent.slug}\" class=\"talent-view-profile\">View Profile</a>\n    </div>\n  `;\n\n  return card;\n}\n\n// Render platform statistics\nfunction renderStatistics() {\n  const statsGrid = document.getElementById('stats-grid');\n  if (!statsGrid) return;\n\n  // Calculate total stats from official talents\n  const totalFollowers = talents.reduce((sum, talent) => sum + talent.totalFollowers, 0);\n  const avgEngagement = (talents.reduce((sum, talent) => sum + talent.avgEngagement, 0) / talents.length).toFixed(1);\n\n  const stats = [\n    { value: `${(totalFollowers / 1000000).toFixed(1)}M+`, label: 'Total Reach' },\n    { value: talents.length, label: 'Managed Talents' },\n    { value: `${avgEngagement}%`, label: 'Avg. Engagement' },\n    { value: '95%', label: 'Client Satisfaction' }\n  ];\n\n  statsGrid.innerHTML = '';\n\n  stats.forEach(stat => {\n    const statCard = document.createElement('div');\n    statCard.className = 'text-center';\n    statCard.innerHTML = `\n      <h3 class=\"gradient-text mb-2\" style=\"font-size: var(--text-4xl);\">${stat.value}</h3>\n      <p style=\"color: var(--color-text-secondary);\">${stat.label}</p>\n    `;\n    statsGrid.appendChild(statCard);\n  });\n}\n\n// Smooth scroll for navigation links\nfunction initSmoothScroll() {\n  document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n    anchor.addEventListener('click', function (e) {\n      e.preventDefault();\n      const target = document.querySelector(this.getAttribute('href'));\n      if (target) {\n        target.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start'\n        });\n      }\n    });\n  });\n}\n\n// Header scroll effect and active section highlighting\nfunction initHeaderScroll() {\n  const header = document.querySelector('header');\n  const navLinks = document.querySelectorAll('.nav-link');\n  const sections = document.querySelectorAll('section[id]');\n  let lastScroll = 0;\n\n  window.addEventListener('scroll', () => {\n    const currentScroll = window.pageYOffset;\n\n    // Header background effect\n    if (currentScroll > 50) {\n      header.style.background = 'rgba(10, 10, 10, 0.95)';\n      header.style.backdropFilter = 'blur(20px)';\n      header.style.boxShadow = 'var(--shadow-lg)';\n    } else {\n      header.style.background = 'rgba(26, 26, 26, 0.8)';\n      header.style.backdropFilter = 'blur(10px)';\n      header.style.boxShadow = 'none';\n    }\n\n    // Active section highlighting\n    sections.forEach(section => {\n      const sectionTop = section.offsetTop - 100;\n      const sectionHeight = section.offsetHeight;\n      const sectionId = section.getAttribute('id');\n\n      if (currentScroll >= sectionTop && currentScroll < sectionTop + sectionHeight) {\n        navLinks.forEach(link => {\n          link.classList.remove('active');\n          if (link.getAttribute('href') === `#${sectionId}`) {\n            link.classList.add('active');\n          }\n        });\n      }\n    });\n\n    lastScroll = currentScroll;\n  });\n}\n\n// Initialize animations on scroll\nfunction initAnimations() {\n  const observerOptions = {\n    threshold: 0.1,\n    rootMargin: '0px 0px -100px 0px'\n  };\n\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        entry.target.classList.add('animate-fadeIn');\n        observer.unobserve(entry.target);\n      }\n    });\n  }, observerOptions);\n\n  // Observe all cards and sections\n  document.querySelectorAll('.card, .section > .container > *').forEach(el => {\n    el.style.opacity = '0';\n    observer.observe(el);\n  });\n}\n\n// Utility function for number formatting\nfunction formatNumber(num) {\n  return new Intl.NumberFormat().format(num);\n}\n\n// Mobile menu toggle\nfunction toggleMobileMenu() {\n  const mobileMenu = document.getElementById('mobile-menu');\n  const menuBtn = document.querySelector('.mobile-menu-btn');\n\n  if (mobileMenu) {\n    if (mobileMenu.style.display === 'none' || mobileMenu.style.display === '') {\n      mobileMenu.style.display = 'block';\n      menuBtn.innerHTML = '<span style=\"display: inline-block; width: 20px; height: 2px; background: currentColor; position: relative; transform: rotate(45deg);\"></span>';\n    } else {\n      mobileMenu.style.display = 'none';\n      menuBtn.innerHTML = '<span style=\"display: inline-block; width: 20px; height: 2px; background: currentColor; position: relative;\"></span>';\n    }\n  }\n}\n\n// Close mobile menu when clicking nav links\ndocument.addEventListener('DOMContentLoaded', function() {\n  const mobileNavLinks = document.querySelectorAll('.mobile-menu .nav-link');\n  mobileNavLinks.forEach(link => {\n    link.addEventListener('click', () => {\n      const mobileMenu = document.getElementById('mobile-menu');\n      const menuBtn = document.querySelector('.mobile-menu-btn');\n      if (mobileMenu) {\n        mobileMenu.style.display = 'none';\n        menuBtn.innerHTML = '<span style=\"display: inline-block; width: 20px; height: 2px; background: currentColor; position: relative;\"></span>';\n      }\n    });\n  });\n});\n\n// Make toggleMobileMenu globally available\nwindow.toggleMobileMenu = toggleMobileMenu;"
        }
    ]
}